#!/usr/bin/env bash
# CI/CD Pipeline Example using Dagger + Docker Model Runner

set -e

echo "🤖 AI-Powered CI/CD Pipeline"
echo "Using Dagger + Docker Model Runner"
echo "=================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print status
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check prerequisites
echo "🔍 Checking prerequisites..."

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    print_error "Docker is not running"
    exit 1
fi
print_status "Docker is running"

# Check if Docker Model Runner is accessible
if ! curl -s http://localhost:12434/engines/llama.cpp/v1/models > /dev/null; then
    print_warning "Docker Model Runner not accessible - starting it..."
    # Try to start Docker Model Runner
    docker run -d -p 12434:80 --name model-runner \
        --mount type=volume,source=model-runner,target=/models \
        docker/model-runner:latest || true
    sleep 10
fi

if curl -s http://localhost:12434/engines/llama.cpp/v1/models > /dev/null; then
    print_status "Docker Model Runner is accessible"
else
    print_error "Cannot connect to Docker Model Runner"
    exit 1
fi

# Check if Dagger CLI is installed
if ! command -v dagger &> /dev/null; then
    print_error "Dagger CLI is not installed"
    echo "Install from: https://docs.dagger.io/install"
    exit 1
fi
print_status "Dagger CLI is available"

# Set environment variables for Docker Model Runner
export OPENAI_BASE_URL="http://model-runner.docker.internal/engines/llama.cpp/v1/"
export OPENAI_DISABLE_STREAMING=true
export OPENAI_MODEL="ai/gemma3"

echo "� Environment configured for Docker Model Runner"

# Function to run AI analysis
run_ai_analysis() {
    local task=$1
    echo "🤖 Running AI $task..."

    if dagger call analyze-codebase --source=. --task="$task"; then
        print_status "AI $task completed"
    else
        print_warning "AI $task failed"
    fi
}

# Main CI pipeline
echo "🏗️  Starting CI Pipeline..."

# Stage 1: Code Quality
echo "📋 Stage 1: Code Quality"
run_ai_analysis "lint"
run_ai_analysis "security-scan"

# Stage 2: AI Analysis
echo "🤖 Stage 2: AI Analysis"
run_ai_analysis "review"
run_ai_analysis "complexity"

# Stage 3: Test Generation
echo "🧪 Stage 3: Test Generation"
echo "🧪 Generating Unit Tests..."
if dagger call generate-test-suite --source=./src --language=python; then
    print_status "AI test generation completed"

    # Run generated tests
    if [ -d "./generated-tests" ]; then
        echo "✅ Running Generated Tests..."
        python -m pytest ./generated-tests/ -v || print_warning "Some tests failed"
    fi
else
    print_warning "AI test generation failed"
fi

# Stage 4: Documentation
echo "📚 Stage 4: Documentation"
run_ai_analysis "documentation"

# Stage 5: Performance Analysis
echo "⚡ Stage 5: Performance Analysis"
run_ai_analysis "performance"

# Stage 6: Generate Summary
echo "📊 Stage 6: Summary Report"
echo "📊 Generating CI Summary..."
# Create a simple summary
{
    echo "# CI Pipeline Summary"
    echo "Generated by Dagger + Docker Model Runner"
    echo ""
    echo "## Completed Stages:"
    echo "- Code Quality Analysis"
    echo "- AI Code Review"
    echo "- Test Generation"
    echo "- Documentation Analysis"
    echo "- Performance Analysis"
    echo ""
    echo "## Generated Files:"
    ls -la generated-tests/ 2>/dev/null || echo "No test files generated"
    echo ""
    echo "## Next Steps:"
    echo "- Review AI analysis results"
    echo "- Integrate generated tests"
    echo "- Address any issues found"
} > ci-summary.md

print_status "CI Pipeline completed successfully!"

echo "📁 Generated files:"
ls -la generated-tests/ 2>/dev/null || echo "No test files generated"
ls -la ci-summary.md 2>/dev/null || echo "No summary generated"

echo "💡 Tips:"
echo "  - Review the AI analysis results above"
echo "  - Check generated-tests/ for new test files"
echo "  - See ci-summary.md for pipeline summary"
echo "  - Integrate this into your CI/CD system"

print_status "Pipeline finished!"